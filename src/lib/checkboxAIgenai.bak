import { GoogleGenerativeAI } from '@google/generative-ai';
import { Storage } from "@google-cloud/storage";

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY || '');
console.log("genAI:", genAI);

export const runtime = 'edge';

export async function checkboxAI(fileUri) {
  try {

    const credential = JSON.parse(
      Buffer.from(process.env.GOOGLE_SERVICE_KEY.replace(/"/g, ""), "base64").toString().replace(/\n/g,"")
      )
      const storageClient = new Storage({
        projectId : "arcookngapp",
        credentials: credential
      });
      // console.log("storageClient:", storageClient);
      const bucketName = "users_uploads";

      function extractFilePathFromUri(fileUri) {
        const uriParts = fileUri.split('/');
        // Remove the 'gs:' and empty string parts, and join the rest
        const filePath = uriParts.slice(3).join('/');
        return filePath;
      }

      const filePath = extractFilePathFromUri(fileUri);
      console.log('filePath:', filePath);
      
      // Function to download file from Google Cloud Storage and convert to base64
      const downloadAndConvertToBase64 = async (bucketName, filePath) => {
        const bucket = storageClient.bucket(bucketName);
        const file = bucket.file(filePath);
      
        return new Promise((resolve, reject) => {
          const chunks = [];
          file.createReadStream()
            .on('data', chunk => chunks.push(chunk))
            .on('end', () => {
              const fileData = Buffer.concat(chunks);
              const base64Data = fileData.toString('base64');
              resolve(base64Data);
            })
            .on('error', error => reject(error));
        });
      };
      
    // Use the function to get base64 data
    const base64Data = await downloadAndConvertToBase64(bucketName, filePath);

    const generativeModel = genAI.getGenerativeModel({ model: 'gemini-pro-vision' });

    const prompt = `
      You are an action detection AI, 
      detect the objects and actions with contextual objects (e.g. cutting an apple),
      reply in the following JSON format as text, in the language of English

      JSON format:
      {
        checklist: {
          objects: {
            "objects": true | false
          },
          actions: {
            "actions": true | false
          }
        }
      }
    `;

    // const filePart = {
    //     file_data: {
    //       file_uri: fileUri,
    //       mime_type: "video/mp4",
    //     },
    //   };
   
      // const request = {
      //   contents: [
      //       { role: "user", 
      //         parts: [
      //           { text : prompt, 
      //             fileData :{
      //               mimeType: "video/mp4",
      //               fileUri: fileUri,
      //             },
      //           }]
      //       }],
      // };

      // console.log(request);

    //  const videoPart = {
    //   fileData: {
    //    fileUri: fileUri,
    //    mimeType: "video/mp4",
    //  }}

    const streamingResp = await generativeModel.generateContentStream([prompt,{inlineData:{data: base64Data, mimeType:"video/mp4"}}]);
    const aggregatedResponse = await streamingResp.response;

    console.log("Aggregated Response:", aggregatedResponse);

    if (!aggregatedResponse.candidates || aggregatedResponse.candidates.length === 0) {
      throw new Error("Invalid or empty candidates in the response.");
    }

    const content = aggregatedResponse.candidates[0].content;

    console.log("Aggregated Response Content:", content);

    if (!content) {
      throw new Error("Invalid content in the response.");
    }

    return content;
  } catch (error) {
    console.error("Error in checkbox function:", error);
    throw error; // rethrow the error to handle it in the calling function
  }
}
